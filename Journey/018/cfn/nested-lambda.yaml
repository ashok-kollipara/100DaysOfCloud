---
Parameters:
  Function:
    Description: name of the lambda function
    Type: String
    Default: bookmark-sync-dynamo
  S3BucketParam:
    Type: String
    Default: book-sync-source
  S3KeyParam:
    Type: String
    Default: code.zip

Resources:
  MyServerlessFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Function
      Description: Serverless function to update bookmarks db
      Architectures:
        - x86_64
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt MyLambdaExecRole.Arn
      Timeout: 3
      Code:
        S3Bucket: !Ref S3BucketParam
        S3Key: !Ref S3KeyParam

  MyLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Lambda function execution role
      RoleName: 
        !Join 
          - '-'
          - - !Ref Function
            - lambda
            - execution
            - role
      AssumeRolePolicyDocument:
        Statement:
          - Effect : Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: snspublish
          PolicyDocument: 
            Statement: 
              - Effect : Allow
                Action: 
                  - 'sns:Publish'
                  - 'sns:GetTopicAttributes'
                  - 'dynamodb:*'
                Resource: "*"

Outputs:
  FuncDetails:
    Description: Details of created lambda function to work with S3
    Value: !GetAtt MyServerlessFunction.Arn
    Export:
      Name: CreatedFunctionName
